---
jupyter:
  jupytext:
    text_representation:
      extension: .qmd
      format_name: quarto
      format_version: '1.0'
      jupytext_version: 1.14.4
  kernelspec:
    display_name: Python 3
    language: python
    name: python3
---

```{python}
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from pandas._libs.tslibs import dtypes, timestamps
```

```{python}
nodes = {'03', '04'}
# models = {'resnet50', 'alexnet'}
model = 'resnet50'
```

```{python}
df_cpu = dict()
df_gpu = dict()

for node in nodes:
    node_name = "aurora" + node
    df_cpu[node] = pd.read_csv(f'./{model}_2_2_64_1_{node_name}.csv', skiprows=[0,1,2,3,4])
    df_gpu[node] = pd.read_csv(f'./{model}_2_2_64_1_{node_name}_gpu.csv')

# df_gpu.drop(columns=['name', 'pci.bus_id'], inplace=True)
# rename columns
for node in nodes:
    df_cpu[node].rename(columns={
        'read':'read_io_total',
        'writ':'write_io_total',
        'time':'system_time',
        'usr':'usr_cpu_usage',
        'sys':'sys_cpu_usage',
        'idl':'idl_cpu_usage',
        'wai':'wai_cpu_usage',
        'stl':'stl_cpu_usage',
        'read.1':'read_dsk_total',
        'writ.1':'writ_dsk_total',
        'used':'used_memory',
        'free':'free_memory',
        'buff':'buff_memory',
        'cach':'cach_memory',
        'recv':'recv_net_total',
        'send':'send_net_total',
        'in':'in_paging',
        'out':'out_paging'}, inplace=True)

    df_gpu[node].rename(columns={
    ' temperature.gpu':'temperature_gpu',
    ' utilization.gpu [%]':'utilization_gpu',
    ' utilization.memory [%]':'utilization_memory',
    ' memory.total [MiB]':'memory_total',
    ' memory.free [MiB]':'memory_free',
    ' memory.used [MiB]':'memory_used'}, inplace=True)
```

```{python}
# print(df.head())
# print(df_gpu.head())
```

```{python}
# Totals

for node in nodes:
    print()
    print(f'======={node}=======')
    print(f"Read IO Total: {df_cpu[node]['read_io_total'].sum():,}")
    print(f"Write IO Total: {df_cpu[node]['write_io_total'].sum():,}")
    print(f"Read Disk Total: {df_cpu[node]['read_dsk_total'].sum():,}")
    print(f"Write Disk Total: {df_cpu[node]['writ_dsk_total'].sum():,}")
    print(f"Used Memory: {df_cpu[node]['used_memory'].sum():,}")
    print(f"Free Memory: {df_cpu[node]['free_memory'].sum():,}")
    print(f"Buffer Memory: {df_cpu[node]['buff_memory'].sum():,}")
    print(f"Cache Memory: {df_cpu[node]['cach_memory'].sum():,}")
    print(f"Receive Net Total: {df_cpu[node]['recv_net_total'].sum():,}")
    print(f"Send Net Total: {df_cpu[node]['send_net_total'].sum():,}")
    print()
    print (f"Total GPU Utilization Memory (%): {df_gpu[node]['utilization_memory'].sum():,}")
    print (f"Total GPU Memory Total (MiB): {df_gpu[node]['memory_total'].sum():,}")
    print (f"Total GPU Memory Free (MiB): {df_gpu[node]['memory_free'].sum():,}")
    print (f"Total GPU Memory Used (MiB): {df_gpu[node]['memory_used'].sum():,}")
```

```{python}
# Means
for node in nodes:
    print()
    print(f'======={node}=======')
    print(f"Read IO Average: {df_cpu[node]['read_io_total'].mean():,}")
    print(f"Write IO Average: {df_cpu[node]['write_io_total'].mean():,}")
    print(f"Read Disk Average: {df_cpu[node]['read_dsk_total'].mean():,}")
    print(f"Write Disk Average: {df_cpu[node]['writ_dsk_total'].mean():,}")
    print(f"Used Memory: {df_cpu[node]['used_memory'].mean():,}")
    print(f"Free Memory: {df_cpu[node]['free_memory'].mean():,}")
    print(f"Buffer Memory: {df_cpu[node]['buff_memory'].mean():,}")
    print(f"Cache Memory: {df_cpu[node]['cach_memory'].mean():,}")
    print(f"Receive Net Average: {df_cpu[node]['recv_net_total'].mean():,}")
    print(f"Send Net Average: {df_cpu[node]['send_net_total'].mean():,}")
    print()
    print (f"Average GPU Utilization Memory (%): {df_gpu[node]['utilization_memory'].mean():,}")
    print (f"Average GPU Memory Total (MiB): {df_gpu[node]['memory_total'].mean():,}")
    print (f"Average GPU Memory Free (MiB): {df_gpu[node]['memory_free'].mean():,}")
    print (f"Average GPU Memory Used (MiB): {df_gpu[node]['memory_used'].mean():,}")
```

```{python}
# Max and Min values
for node in nodes:
    print()
    print(f'======={node}=======')
    print(f"Max Read IO: {df_cpu[node]['read_io_total'].max():,} ; Min Read IO: {df_cpu[node]['read_io_total'].min()}")
    print(f"Max Write IO: {df_cpu[node]['write_io_total'].max():,} ; Min Write IO: {df_cpu[node]['write_io_total'].min()}")
    print(f"Max Read Disk: {df_cpu[node]['read_dsk_total'].max():,} ; Min Read Disk: {df_cpu[node]['read_dsk_total'].min()}")
    print(f"Max Write Disk: {df_cpu[node]['writ_dsk_total'].max():,} ; Min Write Disk: {df_cpu[node]['writ_dsk_total'].min()}")
    print(f"Max Used Memory: {df_cpu[node]['used_memory'].max():,} ; Min Used Memory: {df_cpu[node]['used_memory'].min()}")
    print(f"Max Free Memory: {df_cpu[node]['free_memory'].max():,} ; Min Free Memory: {df_cpu[node]['free_memory'].min()}")
    print(f"Max Buffer Memory: {df_cpu[node]['buff_memory'].max():,} ; Min Buffer Memory: {df_cpu[node]['buff_memory'].min()}")
    print(f"Max Cache Memory: {df_cpu[node]['cach_memory'].max():,} ; Min Cache Memory: {df_cpu[node]['cach_memory'].min()}")
    print(f"Max Receive Net: {df_cpu[node]['recv_net_total'].max():,} ; Min Receive Net: {df_cpu[node]['recv_net_total'].min()}")
    print(f"Max Send Net: {df_cpu[node]['send_net_total'].max():,} ; Min Send Net: {df_cpu[node]['send_net_total'].min()}")
    print(f"Max User CPU Usage: {df_cpu[node]['usr_cpu_usage'].max():,} ; Min User CPU Usage: {df_cpu[node]['usr_cpu_usage'].min()}")
    print(f"Max System CPU Usage: {df_cpu[node]['sys_cpu_usage'].max():,} ; Min System CPU Usage: {df_cpu[node]['sys_cpu_usage'].min()}")
    print(f"Max Idle CPU Usage: {df_cpu[node]['idl_cpu_usage'].max():,} ; Min Idle CPU Usage: {df_cpu[node]['idl_cpu_usage'].min()}")
    print(f"Max Wait CPU Usage: {df_cpu[node]['wai_cpu_usage'].max():,} ; Min Wait CPU Usage: {df_cpu[node]['wai_cpu_usage'].min()}")
    print()
    print (f"Max GPU Temperature: {df_gpu[node]['temperature_gpu'].max():,} ; Min GPU Temperature: {df_gpu[node]['temperature_gpu'].min()}")
    print (f"Max GPU Utilization (%): {df_gpu[node]['utilization_gpu'].max():,} ; Min GPU Utilization: {df_gpu[node]['utilization_gpu'].min()}")
    print (f"Max GPU Utilization Memory (MiB): {df_gpu[node]['utilization_memory'].max():,} ; Min GPU Utilization Memory (MiB): {df_gpu[node]['utilization_memory'].min()}")
    print (f"Max GPU Memory Total (MiB): {df_gpu[node]['memory_total'].max():,} ; Min GPU Memory Total (MiB): {df_gpu[node]['memory_total'].min()}")
    print (f"Max GPU Memory Free (MiB): {df_gpu[node]['memory_free'].max():,} ; Min GPU Memory Free (MiB): {df_gpu[node]['memory_free'].min()}")
    print (f"Max GPU Memory Used (MiB): {df_gpu[node]['memory_used'].max():,} ; Min GPU Memory Used (MiB): {df_gpu[node]['memory_used'].min()}")
```

```{python}
# plots IO with time
for node in nodes:
    plt.figure()
    plt.plot(df_cpu[node]['system_time'], df_cpu[node]['read_io_total'], label='Reads')
    plt.plot(df_cpu[node]['system_time'], df_cpu[node]['write_io_total'], label='Write Requests')
    plt.xlabel('Time (s)')
    plt.ylabel('#IO operations')
    plt.title('IO with time')
    plt.legend()
    plt.show()
```

```{python}
# plots Disk with time
for node in nodes:
    plt.figure()
    plt.plot(df_cpu[node]['system_time'], df_cpu[node]['read_dsk_total'], label='Reads')
    plt.plot(df_cpu[node]['system_time'], df_cpu[node]['writ_dsk_total'], label='Writes')
    plt.xlabel('Time (s)')
    plt.ylabel('Disk (bytes)')
    plt.title('Disk with time')
    plt.legend()
    plt.show()
```

```{python}
# plots Memory with time
for node in nodes:
    plt.figure()
    plt.plot(df_cpu[node]['system_time'], df_cpu[node]['used_memory'], label='Used Memory')
    plt.plot(df_cpu[node]['system_time'], df_cpu[node]['free_memory'], label='Free Memory')
    plt.plot(df_cpu[node]['system_time'], df_cpu[node]['buff_memory'], label='Buffer Memory')
    plt.plot(df_cpu[node]['system_time'], df_cpu[node]['cach_memory'], label='Cache Memory')
    plt.xlabel('Time (s)')
    plt.ylabel('Memory (bytes)')
    plt.title('Memory with time')
    plt.legend()
    plt.show()
```

```{python}
# plots Network with time
for node in nodes:
    plt.figure()
    plt.plot(df_cpu[node]['system_time'], df_cpu[node]['recv_net_total'], label='Received Net')
    plt.plot(df_cpu[node]['system_time'], df_cpu[node]['send_net_total'], label='Send Net')
    plt.xlabel('Time (s)')
    plt.ylabel('Network (bytes)')
    plt.title('Network with time')
    plt.legend()
    plt.show()
```

```{python}
# plots CPU with time
for node in nodes:
    plt.figure()
    plt.plot(df_cpu[node]['system_time'], df_cpu[node]['usr_cpu_usage'], label='usr CPU usage')
    plt.plot(df_cpu[node]['system_time'], df_cpu[node]['sys_cpu_usage'], label='sys CPU usage')
    plt.plot(df_cpu[node]['system_time'], df_cpu[node]['idl_cpu_usage'], label='idl CPU usage')
    plt.plot(df_cpu[node]['system_time'], df_cpu[node]['wai_cpu_usage'], label='wai CPU usage')
    plt.xlabel('Time (s)')
    plt.ylabel('CPU (%)')
    plt.title('CPU with time')
    plt.legend()
    plt.show()
```

```{python}
# plots gpu temperature with time
for node in nodes:
    plt.figure()
    plt.plot(df_gpu[node]['timestamp'], df_gpu[node]['temperature_gpu'], label='Temperature')
    plt.xlabel('Time (s)')
    plt.ylabel('Temperature (Â°C)')
    plt.title('GPU Temperature with time')
    plt.legend()
    plt.show()
```

```{python}
# plots gpu utilization with time
for node in nodes:
    plt.figure()
    plt.plot(df_gpu[node]['timestamp'], df_gpu[node]['utilization_gpu'], label='Utilization')
    plt.xlabel('Time (s)')
    plt.ylabel('Utilization (%)')
    plt.title('GPU Utilization with time')
    plt.legend()
    plt.show()
```

```{python}
# plots gpu memory with time
for node in nodes:
    plt.figure()
    plt.plot(df_gpu[node]['timestamp'], df_gpu[node]['memory_total'], label='Total Memory')
    plt.plot(df_gpu[node]['timestamp'], df_gpu[node]['memory_free'], label='Free Memory')
    plt.plot(df_gpu[node]['timestamp'], df_gpu[node]['memory_used'], label='Used Memory')
    plt.xlabel('Time (s)')
    plt.ylabel('Memory (MiB)')
    plt.title('GPU Memory with time')
    plt.legend()
    plt.show()
```
